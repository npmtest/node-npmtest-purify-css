{"/home/travis/build/npmtest/node-npmtest-purify-css/test.js":"/* istanbul instrument in package npmtest_purify_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-purify-css/lib.npmtest_purify_css.js":"/* istanbul instrument in package npmtest_purify_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_purify_css = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_purify_css = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-purify-css/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-purify-css && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_purify_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_purify_css\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_purify_css.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_purify_css.rollup.js'] =\n            local.assetsDict['/assets.npmtest_purify_css.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_purify_css.__dirname + '/lib.npmtest_purify_css.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-purify-css/node_modules/purify-css/src/purifycss.js":"var fs = require('fs');\n\nvar CleanCss = require('clean-css');\nvar getAllWordsInContent = require('./utils/ExtractWordsUtil').getAllWordsInContent;\nvar CssTreeWalker = require('./CssTreeWalker');\nvar FileUtil = require('./utils/FileUtil');\nvar PrintUtil = require('./utils/PrintUtil');\nvar SelectorFilter = require('./SelectorFilter');\n\n////////////////////\n// ARGUMENTS\n// files    = an array of filepaths to html/js files OR a raw string of content to search through\n// css      = an array of filepaths to css files OR a raw string of css to filter\n// options  = (optional) {\n//   output  : string (filepath to write purified css to. if false, function returns raw string)\n//   minify  : boolean (if true, will minify the purified css)\n//   info    : boolean (if true, will log out stats of how much css was reduced)\n//   rejected: boolean (if true, will log out rejected css)\n// }\n// callback = (optional) a function that the purified css will be passed into\n////////////////////\n\nvar getOptions = function (options) {\n  options = options || {};\n  var defaultOptions = {\n    output: false,\n    minify: false,\n    info: false,\n    whitelist: []\n  };\n\n  Object.keys(options).forEach(function (option) {\n    defaultOptions[option] = options[option];\n  });\n\n  return defaultOptions;\n};\n\nvar minify = function (cssSource) {\n  return new CleanCss().minify(cssSource).styles;\n};\n\nvar purify = function (searchThrough, css, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = getOptions(options);\n\n  var cssString = FileUtil.filesToSource(css, 'css');\n  var content = FileUtil.filesToSource(searchThrough, 'content');\n\n  PrintUtil.startLog(minify(cssString).length);\n\n  var wordsInContent = getAllWordsInContent(content);\n\n  var selectorFilter = new SelectorFilter(wordsInContent, options.whitelist);\n\n  var tree = new CssTreeWalker(cssString, [selectorFilter]);\n  tree.beginReading();\n  var source = tree.toString();\n\n  if (options.minify) {\n    source = minify(source);\n  }\n\n  if (options.info && options.minify) {\n    PrintUtil.printInfo(source.length);\n  } else if (options.info && !options.minify) {\n    PrintUtil.printInfo(minify(source).length);\n  }\n\n  if (options.rejected) {\n    PrintUtil.printRejected(selectorFilter.rejectedSelectors);\n  }\n\n  if (!options.output) {\n    return callback ? callback(source) : source;\n  } else {\n    fs.writeFile(options.output, source, function (err) {\n      if (err) {\n        return err;\n      }\n    });\n  }\n};\n\nmodule.exports = purify;\n","/home/travis/build/npmtest/node-npmtest-purify-css/node_modules/purify-css/src/utils/ExtractWordsUtil.js":"var addWord = function (words, word) {\n  if (word.length > 0) {\n    words.push(word);\n  }\n};\n\nvar ExtractWordsUtil = {\n  getAllWordsInContent: function (content) {\n    var used = {\n      // Always include html and body.\n      html: true,\n      body: true\n    };\n    var word = '';\n\n    for (var i = 0; i < content.length; i++) {\n      var chr = content[i];\n\n      if (chr.match(/[a-z]+/)) {\n        word += chr;\n      } else {\n        used[word] = true;\n        word = '';\n      }\n    }\n\n    used[word] = true;\n\n    return used;\n  },\n\n  getAllWordsInSelector: function (selector) {\n    // Remove attr selectors. \"a[href...]\"\" will become \"a\".\n    selector = selector.replace(/\\[(.+?)\\]/g, '').toLowerCase();\n\n    // If complex attr selector (has a bracket in it) just leave\n    // the selector in. ¯\\_(ツ)_/¯\n    if (selector.indexOf('[') !== -1 || selector.indexOf(']') !== -1) {\n      return [];\n    }\n\n    var words = [];\n    var word = '';\n    var skipNextWord = false;\n\n    for (var i = 0; i < selector.length; i++) {\n      var letter = selector[i];\n\n      if (skipNextWord && (letter !== '.' || letter !== '#' || letter !== ' ')) {\n        continue;\n      }\n\n      // If pseudoclass or universal selector, skip the next word\n      if (letter === ':' || letter === '*') {\n        addWord(words, word);\n        word = '';\n        skipNextWord = true;\n        continue;\n      }\n\n      if (letter.match(/[a-z]+/)) {\n        word += letter;\n      } else {\n        addWord(words, word);\n        word = '';\n        skipNextWord = false;\n      }\n    }\n\n    addWord(words, word);\n    return words;\n  }\n};\n\nmodule.exports = ExtractWordsUtil;\n","/home/travis/build/npmtest/node-npmtest-purify-css/node_modules/purify-css/src/CssTreeWalker.js":"var EventEmitter = require('events').EventEmitter;\nvar rework = require('rework');\n\nvar RULE_TYPE = 'rule';\nvar MEDIA_TYPE = 'media';\n\nvar CssTreeWalker = function (code, plugins) {\n  EventEmitter.call(this);\n  this.startingSource = code;\n  this.ast = null;\n\n  plugins.forEach(function (plugin) {\n    plugin.initialize(this);\n  }.bind(this));\n};\n\nCssTreeWalker.prototype = Object.create(EventEmitter.prototype);\nCssTreeWalker.prototype.constructor = CssTreeWalker;\n\nCssTreeWalker.prototype.beginReading = function () {\n  this.ast = rework(this.startingSource)\n    .use(this.readPlugin.bind(this));\n};\n\nCssTreeWalker.prototype.readPlugin = function (tree) {\n  this.readRules(tree.rules);\n  this.removeEmptyRules(tree.rules);\n};\n\nCssTreeWalker.prototype.readRules = function (rules) {\n  rules.forEach(function (rule) {\n    var ruleType = rule.type;\n\n    if (ruleType === RULE_TYPE) {\n      this.emit('readRule', rule.selectors, rule);\n    }\n\n    if (ruleType === MEDIA_TYPE) {\n      this.readRules(rule.rules);\n    }\n  }.bind(this));\n};\n\nCssTreeWalker.prototype.toString = function () {\n  if (this.ast) {\n    return this.ast.toString().replace(/,\\n/g, ',');\n  }\n\n  return '';\n};\n\nCssTreeWalker.prototype.removeEmptyRules = function (rules) {\n  var emptyRules = [];\n\n  rules.forEach(function (rule) {\n    var ruleType = rule.type;\n\n    if (ruleType === RULE_TYPE && rule.selectors.length === 0) {\n      emptyRules.push(rule);\n    }\n\n    if (ruleType === MEDIA_TYPE) {\n      this.removeEmptyRules(rule.rules);\n      if (rule.rules.length === 0) {\n        emptyRules.push(rule);\n      }\n    }\n  }.bind(this));\n\n  emptyRules.forEach(function (emptyRule) {\n    var index = rules.indexOf(emptyRule);\n    rules.splice(index, 1);\n  });\n};\n\nmodule.exports = CssTreeWalker;\n","/home/travis/build/npmtest/node-npmtest-purify-css/node_modules/purify-css/src/utils/FileUtil.js":"var fs = require('fs');\nvar glob = require('glob');\nvar UglifyJS = require('uglifyjs');\n\nvar FileUtil = {\n  compressCode: function (code) {\n    try {\n      // Try to minimize the code as much as possible, removing noise.\n      var ast = UglifyJS.parse(code);\n      ast.figure_out_scope();\n      /* eslint-disable new-cap */\n      var compressor = UglifyJS.Compressor({warnings: false});\n      /* eslint-enable new-cap */\n      ast = ast.transform(compressor);\n      ast.figure_out_scope();\n      ast.compute_char_frequency();\n      ast.mangle_names({toplevel: true});\n      code = ast.print_to_string().toLowerCase();\n    } catch (e) {\n      // If compression fails, assume it's not a JS file and return the full code.\n    }\n\n    return code.toLowerCase();\n  },\n\n  concatFiles: function (files, options) {\n    options = options || {};\n\n    return files.reduce(function (total, file) {\n      var code = '';\n\n      try {\n        code = fs.readFileSync(file, 'utf8');\n        if (options.compress) {\n          code = FileUtil.compressCode(code);\n        }\n      } catch (e) {\n        console.warn('\\nWARNING: Could not read ' + file + '.');\n      }\n\n      return total + code + ' ';\n    }, '');\n  },\n\n  getFilesFromPatternArray: function (fileArray) {\n    var sourceFiles = {};\n\n    fileArray.forEach(function (string) {\n      try {\n        // See if string is a filepath, not a file pattern.\n        fs.statSync(string);\n        sourceFiles[string] = true;\n      } catch (e) {\n        var files = glob.sync(string);\n        files.forEach(function (file) {\n          sourceFiles[file] = true;\n        });\n      }\n    });\n\n    return Object.keys(sourceFiles);\n  },\n\n  filesToSource: function (files, type) {\n    var isContent = type === 'content';\n    var options = {compress: isContent};\n\n    if (Array.isArray(files)) {\n      files = FileUtil.getFilesFromPatternArray(files);\n      return FileUtil.concatFiles(files, options);\n    }\n\n    // 'files' is already a source string.\n    if (isContent) {\n      return FileUtil.compressCode(files);\n    } else {\n      return files;\n    }\n  }\n};\n\nmodule.exports = FileUtil;\n","/home/travis/build/npmtest/node-npmtest-purify-css/node_modules/purify-css/src/utils/PrintUtil.js":"var startTime;\nvar beginningLength;\n\nvar PrintUtil = {\n\n  printInfo: function (endingLength) {\n    var logFn = console.error;\n    logFn.call(null, '##################################');\n    logFn.call(null, 'PurifyCSS has reduced the file size by ~' +\n      (((beginningLength - endingLength) / beginningLength) * 100).toFixed(1) + '%');\n    logFn.call(null, '##################################');\n    logFn.call(null, 'This function took: ', new Date() - startTime, 'ms');\n  },\n\n  printRejected: function (rejectedTwigs) {\n    var logFn = console.error;\n    logFn.call(null, '##################################');\n    logFn.call(null, 'Rejected selectors:');\n    logFn.call(null, rejectedTwigs.join('\\n'));\n    logFn.call(null, '##################################');\n  },\n\n  startLog: function (cssLength) {\n    startTime = new Date();\n    beginningLength = cssLength;\n  }\n\n};\n\nmodule.exports = PrintUtil;\n","/home/travis/build/npmtest/node-npmtest-purify-css/node_modules/purify-css/src/SelectorFilter.js":"var getAllWordsInSelector = require('./utils/ExtractWordsUtil').getAllWordsInSelector;\n\nfunction isWildcardWhitelistSelector(selector) {\n  return selector[0] === '*' && selector[selector.length - 1] === '*';\n}\n\nfunction hasWhitelistMatch(selector, whitelist) {\n  for (var i = 0; i < whitelist.length; i++) {\n    if (selector.indexOf(whitelist[i]) !== -1) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar SelectorFilter = function (contentWords, whitelist) {\n  this.contentWords = contentWords;\n  this.rejectedSelectors = [];\n  this.wildcardWhitelist = [];\n\n  this.parseWhitelist(whitelist);\n};\n\nSelectorFilter.prototype.initialize = function (CssSyntaxTree) {\n  CssSyntaxTree.on('readRule', this.parseRule.bind(this));\n};\n\nSelectorFilter.prototype.parseWhitelist = function (whitelist) {\n  whitelist.forEach(function (whitelistSelector) {\n    whitelistSelector = whitelistSelector.toLowerCase();\n\n    if (isWildcardWhitelistSelector(whitelistSelector)) {\n      // If '*button*' then push 'button' onto list.\n      this.wildcardWhitelist.push(\n        whitelistSelector.substr(1, whitelistSelector.length - 2)\n      );\n    } else {\n      getAllWordsInSelector(whitelistSelector).forEach(function (word) {\n        this.contentWords[word] = true;\n      }.bind(this));\n    }\n  }.bind(this));\n};\n\nSelectorFilter.prototype.parseRule = function (selectors, rule) {\n  rule.selectors = this.filterSelectors(selectors);\n};\n\nSelectorFilter.prototype.filterSelectors = function (selectors) {\n  var contentWords = this.contentWords;\n  var rejectedSelectors = this.rejectedSelectors;\n  var wildcardWhitelist = this.wildcardWhitelist;\n  var usedSelectors = [];\n\n  selectors.forEach(function (selector) {\n    if (hasWhitelistMatch(selector, wildcardWhitelist)) {\n      usedSelectors.push(selector);\n      return;\n    }\n\n    var words = getAllWordsInSelector(selector);\n    var usedWords = words.filter(function (word) {\n      return contentWords[word];\n    });\n\n    if (usedWords.length === words.length) {\n      usedSelectors.push(selector);\n    } else {\n      rejectedSelectors.push(selector);\n    }\n  });\n\n  return usedSelectors;\n};\n\nmodule.exports = SelectorFilter;\n"}